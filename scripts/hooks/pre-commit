#!/bin/bash

# Pre-commit hook to update copyright years in file headers
# This script handles two formats:
# 1. Single year: "2024" -> "2024-<current_year>"
# 2. Range with dot: "2024.2025" -> "2024-<current_year>"
# 3. Range with dash: "2024-2025" -> "2024-<current_year>"

set -e

# Get current year
CURRENT_YEAR=$(date +%Y)

# Get list of files being committed (only staged files)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Flag to track if any files were modified
FILES_MODIFIED=false

# Function to update copyright year in a file
update_copyright_year() {
    local file="$1"
    local temp_file=$(mktemp)
    local modified=false

    # Skip binary files
    if file "$file" | grep -q "binary"; then
        return 0
    fi

    # Process the file line by line
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Look for copyright lines with various year formats
        if [[ "$line" =~ Copyright.*\(c\)[[:space:]]*([0-9]{4})([.-]([0-9]{4}))?[[:space:]]*(.*)$ ]]; then
            START_YEAR="${BASH_REMATCH[1]}"
            SEPARATOR="${BASH_REMATCH[2]:0:1}"  # Get first character (. or -)
            END_YEAR="${BASH_REMATCH[3]}"
            REST="${BASH_REMATCH[4]}"

            # Determine the new copyright line
            if [[ -n "$END_YEAR" ]]; then
                # Already has a range, update the end year
                NEW_LINE="Copyright (c) $START_YEAR-$CURRENT_YEAR $REST"
            else
                # Single year, convert to range if not current year
                if [[ "$START_YEAR" != "$CURRENT_YEAR" ]]; then
                    NEW_LINE="Copyright (c) $START_YEAR-$CURRENT_YEAR $REST"
                else
                    NEW_LINE="$line"  # Keep as is if it's already current year
                fi
            fi

            # Check if the line actually changed
            if [[ "$line" != "$NEW_LINE" ]]; then
                echo "$NEW_LINE" >> "$temp_file"
                modified=true
                echo "Updated copyright in $file:"
                echo "  Old: $line"
                echo "  New: $NEW_LINE"
            else
                echo "$line" >> "$temp_file"
            fi
        else
            echo "$line" >> "$temp_file"
        fi
    done < "$file"

    # If file was modified, replace original and stage it
    if [[ "$modified" == true ]]; then
        mv "$temp_file" "$file"
        git add "$file"
        FILES_MODIFIED=true
        echo "Staged updated file: $file"
    else
        rm -f "$temp_file"
    fi
}

# Process each staged file
for file in $STAGED_FILES; do
    # Skip deleted files
    if [[ ! -f "$file" ]]; then
        continue
    fi

    # Only process text files that might contain copyright notices
    case "$file" in
        *.py|*.js|*.ts|*.java|*.c|*.cpp|*.h|*.hpp|*.md|*.txt|*.rst|*.yml|*.yaml|*.json|*.xml|*.html|*.css|*.sh|*.bat)
            update_copyright_year "$file"
            ;;
        *)
            # Check if it's a text file without extension
            if file "$file" | grep -q "text"; then
                update_copyright_year "$file"
            fi
            ;;
    esac
done

# If files were modified, inform the user
if [[ "$FILES_MODIFIED" == true ]]; then
    echo ""
    echo "Copyright years have been updated and staged."
    echo "The commit will proceed with the updated files."
    echo ""
fi

# Allow the commit to proceed
exit 0
